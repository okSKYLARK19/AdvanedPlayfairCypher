#include <iostream>
#include <string>
using namespace std;

class playfair {
   public:
      string msg; char n[5][5];
   private:
   
   
    //get the characters
   char getChar( int a, int b )
   { 
      return n[ (b + 5) % 5 ][ (a + 5) % 5 ];
   }
   
   //get the position
   bool getPos( char l, int &c, int &d ) 
   {
      for( int y = 0; y < 5; y++ )
      for( int x = 0; x < 5; x++ )
      if( n[y][x] == l ) {
         c = x;
         d= y;
      return true;
      }
      return false;
   }

      void play( int dir )
      {
      int j,k,p,q;
      string nmsg;
      for( string::const_iterator it = msg.begin(); it != msg.end(); it++ ) 
      {
         if( getPos( *it++, j, k ) )
         if( getPos( *it, p, q)){
            //for same row
            if( j == p ) {
               nmsg+= getChar( j, k + dir );
               nmsg += getChar( p, q + dir );
            }
            //for same column
            else if( k == q ) {
               nmsg += getChar( j + dir, k );
               nmsg += getChar( p + dir, q );
            } else {
               nmsg += getChar( p, k );
               nmsg += getChar( j, q );
            }
         }
      }
      msg = nmsg;
      cout<<msg<<endl;;
      //ADD THE MODIFICATION HERE
      for(int i=0; i<msg.length()-1;++i)
      {
          msg.at(i) = (char)((int)msg.at(i) + i);
      }
      cout<<msg<<endl;
   }
   
   
   void print() //print the solution 
   {
      cout << "\n\n Solution:" << endl;
      string::iterator it = msg.begin(); int count = 0;
      while( it != msg.end() ) {
         cout << *it;
         it++;
         cout << *it << " ";
         it++;
         if( ++count >= 26 )
         cout << endl;
         count = 0;
      }
      cout << endl << endl;
   }
   
   
   // THE MAIN KEY GENERATOR FUNCTION 
      string keygen(int k)
      {
          string key;
          int p=5;// the power of x
          for(int i=0; i<5; ++i){
              if(i==0) key= key + (char)(((k)%26)+65);
              else 
              {
                key= key + (char)(((k*p)%26)+65);
                k=k*p;
                --p;
              }
          }
          return key;
      }
   
   
   //get the original message
   void getText( string t , bool m) 
   {
      for( string::iterator it = t.begin(); it != t.end(); it++ )
      {
         //to choose J = I or no Q in the alphabet.
         *it = toupper( *it );
         if( *it < 65 || *it > 90 )
            continue;
         if( *it == 'J' && m )
            *it = 'I';
         else if( *it == 'Q' && !m )
            continue;
         msg += *it;
      }  
       string nmsg = ""; size_t len = msg.length();
       
         for( size_t x = 0; x < len; x += 2 ) 
         {
            nmsg += msg[x];
            if( x + 1 < len ) 
            {
               if( msg[x] == msg[x + 1] ) nmsg += 'X';
               nmsg += msg[x + 1];
            }
         }
      msg = nmsg;
      if( msg.length() & 1 )
      msg += 'X';

   }
   
   
   void createEncoder( string key, bool m ) 
   {
      key += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      string s= "";
      for( string::iterator it = key.begin(); it != key.end(); it++ ) 
      {
         *it = toupper( *it );
         if( *it < 65 || *it > 90 )
            continue;
         if( ( *it == 'J' && m ) || ( *it == 'Q' && !m ) )
            continue;
         if( s.find( *it ) == -1 )
            s += *it;
      }
      copy( s.begin(), s.end(), &n[0][0] );
      cout<<endl;
      for (int i = 0; i < 5; i++) 
      { 
          for (int j = 0; j < 5; j++) 
            { 
                cout << n[i][j] << " "; 
            } 
     
          // Newline for new row 
          cout << endl; 
       }
   }
   public:
   void play( string k, int kk, string t ,bool m) 
   {
      k=keygen(kk);
      createEncoder( k,m );
      getText(t,m);
      play( 1 );
      print();
   }

};

int main( int argc, char* argv[] ) {
   string k, msg, i;
   bool m;
   int kk;
   cout << "Encrpyt"<<endl;
   cout << "Enter the key generator k:"<<endl;
   cin >> kk;
   cout << "I <-> J (Y/N): "<<endl;
   cin >> i;
   m = ( i[0] == 'y' || i[0] == 'Y' );
   cout << "Enter the message: "<<endl;
   cin >> msg;
   playfair pf;
   pf.play(k,kk,msg,m);
   return 0;
}


